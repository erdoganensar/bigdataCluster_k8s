apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pv-claim
  namespace: {cluster_namespace}
spec:
  storageClassName: standard
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: {cluster_metadb_host_name}
  namespace: {cluster_namespace}
spec:
  replicas: 1
  selector:
    matchLabels:
      component: {cluster_metadb_host_name}
  template:
    metadata:
      labels:
        component: {cluster_metadb_host_name}
    spec:
      #imagePullSecrets:
      #  - name: docker-registry-key
      hostname: {cluster_metadb_host_name}
      containers:
        - name: {cluster_metadb_host_name}
          image: ensaradaletai/bigdata_postgres:latest
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: {cluster-metadb-listen-port}
          resources:
            requests:
              cpu: 100m
              memory: 512Mi
          env:
            - name: POSTGRES_PASSWORD
              value: "{postgresql-root-pwd}"
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
          volumeMounts:
            #- name: {cluster-metadb-config}
            #  mountPath: /etc/mysql/conf.d/
          - mountPath: /var/lib/postgresql/data
            name: postgres-pv-storage
          livenessProbe:
            tcpSocket:
              port: {cluster-metadb-listen-port}
            initialDelaySeconds: 30
            periodSeconds: 10
      volumes:
      - name: postgres-pv-storage
        persistentVolumeClaim:
          claimName: postgres-pv-claim
---
apiVersion: v1
kind: Service
metadata:
  name: dn-{cluster_metadb_host_name}
  namespace: {cluster_namespace}
  labels:
    component: {cluster_metadb_host_name}
spec:
  ports:
  - port:  {cluster-metadb-listen-port}
    name: cluster-metadb
    protocol: TCP
  selector:
    component: {cluster_metadb_host_name}
